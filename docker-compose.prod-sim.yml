# Production Simulation Environment
# This docker-compose file simulates the production stack:
# - Frontend: Vercel (Next.js standalone build)
# - Backend: Fly.io (with memory/CPU constraints)
# - Database: Supabase (managed via Supabase CLI - run `npx supabase start`)

# NOTE: Start Supabase first with: npx supabase start
# Then run: docker-compose -f docker-compose.prod-sim.yml up -d

services:
  # ============================================================================
  # APPLICATION SERVICES (Fly.io + Vercel Simulation)
  # ============================================================================

  # Backend API - Simulating Fly.io constraints
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prodsim-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database connection to Supabase CLI stack (use host.docker.internal on Mac/Windows)
      DATABASE_URL: postgresql+psycopg://postgres:postgres@host.docker.internal:54322/postgres
      ASYNC_DATABASE_URL: postgresql+asyncpg://postgres:postgres@host.docker.internal:54322/postgres

      # API Settings
      PORT: 8000
      PYTHONPATH: /api

      # Security
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:54321}

      # Environment
      ENVIRONMENT: local-prod-sim
    volumes:
      - api-data:/api/data
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/')\" || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    # Fly.io VM constraints (256MB RAM, 1 shared CPU)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Frontend - Simulating Vercel deployment
  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend
      args:
        # Build-time arguments that get baked into the client bundle
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0}
    container_name: prodsim-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Runtime environment variables (for server-side)
      NEXT_PUBLIC_API_URL: http://localhost:8000
      INTERNAL_API_URL: http://api:8000  # Docker internal network URL for server-side calls
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev-nextauth-secret}
      NODE_ENV: production

      # Supabase connection (Supabase CLI stack)
      NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"const http = require('http'); http.get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1));\""]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Vercel-like constraints
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  api-data:
    name: prodsim-api-data

# ============================================================================
# NOTES
# ============================================================================
#
# Supabase Services (DB, Auth, Storage, Realtime, etc.):
#   Managed by Supabase CLI. Start with: npx supabase start
#   Stop with: npx supabase stop
#   Status: npx supabase status
#
# URLs when running:
#   - API: http://localhost:8000
#   - Frontend: http://localhost:3000
#   - Supabase API: http://localhost:54321
#   - Supabase Studio: http://localhost:54323
#   - Supabase DB: postgresql://postgres:postgres@localhost:54322/postgres
#   - Mailpit (emails): http://localhost:54324
#
# To run:
#   1. npx supabase start
#   2. docker-compose -f docker-compose.prod-sim.yml up -d
#
# To stop:
#   1. docker-compose -f docker-compose.prod-sim.yml down
#   2. npx supabase stop
#
# ============================================================================
